/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package MapReduce.Thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-05-28")
public class MapReduceWorker {

  public interface Iface {

    public boolean AssignWork(String dataFileName, String mapFileName, String reduceFileName, java.util.List<ClientListeningInfo> workersList) throws org.apache.thrift.TException;

    public boolean StartMap() throws InvalidState, org.apache.thrift.TException;

    public boolean StartReduce() throws InvalidState, org.apache.thrift.TException;

    public int Ping() throws org.apache.thrift.TException;

    public void RegisterMapPair(java.util.List<KeyValueEntity> pairs) throws InvalidState, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void AssignWork(String dataFileName, String mapFileName, String reduceFileName, java.util.List<ClientListeningInfo> workersList, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException;

    public void StartMap(org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException;

    public void StartReduce(org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException;

    public void Ping(org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws org.apache.thrift.TException;

    public void RegisterMapPair(java.util.List<KeyValueEntity> pairs, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public boolean AssignWork(String dataFileName, String mapFileName, String reduceFileName, java.util.List<ClientListeningInfo> workersList) throws org.apache.thrift.TException
    {
      send_AssignWork(dataFileName, mapFileName, reduceFileName, workersList);
      return recv_AssignWork();
    }

    public void send_AssignWork(String dataFileName, String mapFileName, String reduceFileName, java.util.List<ClientListeningInfo> workersList) throws org.apache.thrift.TException
    {
      AssignWork_args args = new AssignWork_args();
      args.setDataFileName(dataFileName);
      args.setMapFileName(mapFileName);
      args.setReduceFileName(reduceFileName);
      args.setWorkersList(workersList);
      sendBase("AssignWork", args);
    }

    public boolean recv_AssignWork() throws org.apache.thrift.TException
    {
      AssignWork_result result = new AssignWork_result();
      receiveBase(result, "AssignWork");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "AssignWork failed: unknown result");
    }

    public boolean StartMap() throws InvalidState, org.apache.thrift.TException
    {
      send_StartMap();
      return recv_StartMap();
    }

    public void send_StartMap() throws org.apache.thrift.TException
    {
      StartMap_args args = new StartMap_args();
      sendBase("StartMap", args);
    }

    public boolean recv_StartMap() throws InvalidState, org.apache.thrift.TException
    {
      StartMap_result result = new StartMap_result();
      receiveBase(result, "StartMap");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.invalidState != null) {
        throw result.invalidState;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "StartMap failed: unknown result");
    }

    public boolean StartReduce() throws InvalidState, org.apache.thrift.TException
    {
      send_StartReduce();
      return recv_StartReduce();
    }

    public void send_StartReduce() throws org.apache.thrift.TException
    {
      StartReduce_args args = new StartReduce_args();
      sendBase("StartReduce", args);
    }

    public boolean recv_StartReduce() throws InvalidState, org.apache.thrift.TException
    {
      StartReduce_result result = new StartReduce_result();
      receiveBase(result, "StartReduce");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.invalidState != null) {
        throw result.invalidState;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "StartReduce failed: unknown result");
    }

    public int Ping() throws org.apache.thrift.TException
    {
      send_Ping();
      return recv_Ping();
    }

    public void send_Ping() throws org.apache.thrift.TException
    {
      Ping_args args = new Ping_args();
      sendBase("Ping", args);
    }

    public int recv_Ping() throws org.apache.thrift.TException
    {
      Ping_result result = new Ping_result();
      receiveBase(result, "Ping");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Ping failed: unknown result");
    }

    public void RegisterMapPair(java.util.List<KeyValueEntity> pairs) throws InvalidState, org.apache.thrift.TException
    {
      send_RegisterMapPair(pairs);
      recv_RegisterMapPair();
    }

    public void send_RegisterMapPair(java.util.List<KeyValueEntity> pairs) throws org.apache.thrift.TException
    {
      RegisterMapPair_args args = new RegisterMapPair_args();
      args.setPairs(pairs);
      sendBase("RegisterMapPair", args);
    }

    public void recv_RegisterMapPair() throws InvalidState, org.apache.thrift.TException
    {
      RegisterMapPair_result result = new RegisterMapPair_result();
      receiveBase(result, "RegisterMapPair");
      if (result.invalidState != null) {
        throw result.invalidState;
      }
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void AssignWork(String dataFileName, String mapFileName, String reduceFileName, java.util.List<ClientListeningInfo> workersList, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      AssignWork_call method_call = new AssignWork_call(dataFileName, mapFileName, reduceFileName, workersList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class AssignWork_call extends org.apache.thrift.async.TAsyncMethodCall<Boolean> {
      private String dataFileName;
      private String mapFileName;
      private String reduceFileName;
      private java.util.List<ClientListeningInfo> workersList;
      public AssignWork_call(String dataFileName, String mapFileName, String reduceFileName, java.util.List<ClientListeningInfo> workersList, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dataFileName = dataFileName;
        this.mapFileName = mapFileName;
        this.reduceFileName = reduceFileName;
        this.workersList = workersList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("AssignWork", org.apache.thrift.protocol.TMessageType.CALL, 0));
        AssignWork_args args = new AssignWork_args();
        args.setDataFileName(dataFileName);
        args.setMapFileName(mapFileName);
        args.setReduceFileName(reduceFileName);
        args.setWorkersList(workersList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_AssignWork();
      }
    }

    public void StartMap(org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      StartMap_call method_call = new StartMap_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class StartMap_call extends org.apache.thrift.async.TAsyncMethodCall<Boolean> {
      public StartMap_call(org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("StartMap", org.apache.thrift.protocol.TMessageType.CALL, 0));
        StartMap_args args = new StartMap_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Boolean getResult() throws InvalidState, org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_StartMap();
      }
    }

    public void StartReduce(org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      StartReduce_call method_call = new StartReduce_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class StartReduce_call extends org.apache.thrift.async.TAsyncMethodCall<Boolean> {
      public StartReduce_call(org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("StartReduce", org.apache.thrift.protocol.TMessageType.CALL, 0));
        StartReduce_args args = new StartReduce_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Boolean getResult() throws InvalidState, org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_StartReduce();
      }
    }

    public void Ping(org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Ping_call method_call = new Ping_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Ping_call extends org.apache.thrift.async.TAsyncMethodCall<Integer> {
      public Ping_call(org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Ping", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Ping_args args = new Ping_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Integer getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Ping();
      }
    }

    public void RegisterMapPair(java.util.List<KeyValueEntity> pairs, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      RegisterMapPair_call method_call = new RegisterMapPair_call(pairs, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class RegisterMapPair_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.util.List<KeyValueEntity> pairs;
      public RegisterMapPair_call(java.util.List<KeyValueEntity> pairs, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pairs = pairs;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("RegisterMapPair", org.apache.thrift.protocol.TMessageType.CALL, 0));
        RegisterMapPair_args args = new RegisterMapPair_args();
        args.setPairs(pairs);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws InvalidState, org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("AssignWork", new AssignWork());
      processMap.put("StartMap", new StartMap());
      processMap.put("StartReduce", new StartReduce());
      processMap.put("Ping", new Ping());
      processMap.put("RegisterMapPair", new RegisterMapPair());
      return processMap;
    }

    public static class AssignWork<I extends Iface> extends org.apache.thrift.ProcessFunction<I, AssignWork_args> {
      public AssignWork() {
        super("AssignWork");
      }

      public AssignWork_args getEmptyArgsInstance() {
        return new AssignWork_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public AssignWork_result getResult(I iface, AssignWork_args args) throws org.apache.thrift.TException {
        AssignWork_result result = new AssignWork_result();
        result.success = iface.AssignWork(args.dataFileName, args.mapFileName, args.reduceFileName, args.workersList);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class StartMap<I extends Iface> extends org.apache.thrift.ProcessFunction<I, StartMap_args> {
      public StartMap() {
        super("StartMap");
      }

      public StartMap_args getEmptyArgsInstance() {
        return new StartMap_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public StartMap_result getResult(I iface, StartMap_args args) throws org.apache.thrift.TException {
        StartMap_result result = new StartMap_result();
        try {
          result.success = iface.StartMap();
          result.setSuccessIsSet(true);
        } catch (InvalidState invalidState) {
          result.invalidState = invalidState;
        }
        return result;
      }
    }

    public static class StartReduce<I extends Iface> extends org.apache.thrift.ProcessFunction<I, StartReduce_args> {
      public StartReduce() {
        super("StartReduce");
      }

      public StartReduce_args getEmptyArgsInstance() {
        return new StartReduce_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public StartReduce_result getResult(I iface, StartReduce_args args) throws org.apache.thrift.TException {
        StartReduce_result result = new StartReduce_result();
        try {
          result.success = iface.StartReduce();
          result.setSuccessIsSet(true);
        } catch (InvalidState invalidState) {
          result.invalidState = invalidState;
        }
        return result;
      }
    }

    public static class Ping<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Ping_args> {
      public Ping() {
        super("Ping");
      }

      public Ping_args getEmptyArgsInstance() {
        return new Ping_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public Ping_result getResult(I iface, Ping_args args) throws org.apache.thrift.TException {
        Ping_result result = new Ping_result();
        result.success = iface.Ping();
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class RegisterMapPair<I extends Iface> extends org.apache.thrift.ProcessFunction<I, RegisterMapPair_args> {
      public RegisterMapPair() {
        super("RegisterMapPair");
      }

      public RegisterMapPair_args getEmptyArgsInstance() {
        return new RegisterMapPair_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public RegisterMapPair_result getResult(I iface, RegisterMapPair_args args) throws org.apache.thrift.TException {
        RegisterMapPair_result result = new RegisterMapPair_result();
        try {
          iface.RegisterMapPair(args.pairs);
        } catch (InvalidState invalidState) {
          result.invalidState = invalidState;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("AssignWork", new AssignWork());
      processMap.put("StartMap", new StartMap());
      processMap.put("StartReduce", new StartReduce());
      processMap.put("Ping", new Ping());
      processMap.put("RegisterMapPair", new RegisterMapPair());
      return processMap;
    }

    public static class AssignWork<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, AssignWork_args, Boolean> {
      public AssignWork() {
        super("AssignWork");
      }

      public AssignWork_args getEmptyArgsInstance() {
        return new AssignWork_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Boolean>() {
          public void onComplete(Boolean o) {
            AssignWork_result result = new AssignWork_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            AssignWork_result result = new AssignWork_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, AssignWork_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.AssignWork(args.dataFileName, args.mapFileName, args.reduceFileName, args.workersList,resultHandler);
      }
    }

    public static class StartMap<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, StartMap_args, Boolean> {
      public StartMap() {
        super("StartMap");
      }

      public StartMap_args getEmptyArgsInstance() {
        return new StartMap_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Boolean>() {
          public void onComplete(Boolean o) {
            StartMap_result result = new StartMap_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            StartMap_result result = new StartMap_result();
            if (e instanceof InvalidState) {
              result.invalidState = (InvalidState) e;
              result.setInvalidStateIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, StartMap_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.StartMap(resultHandler);
      }
    }

    public static class StartReduce<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, StartReduce_args, Boolean> {
      public StartReduce() {
        super("StartReduce");
      }

      public StartReduce_args getEmptyArgsInstance() {
        return new StartReduce_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Boolean>() {
          public void onComplete(Boolean o) {
            StartReduce_result result = new StartReduce_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            StartReduce_result result = new StartReduce_result();
            if (e instanceof InvalidState) {
              result.invalidState = (InvalidState) e;
              result.setInvalidStateIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, StartReduce_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.StartReduce(resultHandler);
      }
    }

    public static class Ping<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Ping_args, Integer> {
      public Ping() {
        super("Ping");
      }

      public Ping_args getEmptyArgsInstance() {
        return new Ping_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Integer>() {
          public void onComplete(Integer o) {
            Ping_result result = new Ping_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            Ping_result result = new Ping_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, Ping_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws org.apache.thrift.TException {
        iface.Ping(resultHandler);
      }
    }

    public static class RegisterMapPair<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, RegisterMapPair_args, Void> {
      public RegisterMapPair() {
        super("RegisterMapPair");
      }

      public RegisterMapPair_args getEmptyArgsInstance() {
        return new RegisterMapPair_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            RegisterMapPair_result result = new RegisterMapPair_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            RegisterMapPair_result result = new RegisterMapPair_result();
            if (e instanceof InvalidState) {
              result.invalidState = (InvalidState) e;
              result.setInvalidStateIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, RegisterMapPair_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.RegisterMapPair(args.pairs,resultHandler);
      }
    }

  }

  public static class AssignWork_args implements org.apache.thrift.TBase<AssignWork_args, AssignWork_args._Fields>, java.io.Serializable, Cloneable, Comparable<AssignWork_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AssignWork_args");

    private static final org.apache.thrift.protocol.TField DATA_FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("dataFileName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField MAP_FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("mapFileName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField REDUCE_FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("reduceFileName", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField WORKERS_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("workersList", org.apache.thrift.protocol.TType.LIST, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new AssignWork_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new AssignWork_argsTupleSchemeFactory();

    public String dataFileName; // required
    public String mapFileName; // required
    public String reduceFileName; // required
    public java.util.List<ClientListeningInfo> workersList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATA_FILE_NAME((short)1, "dataFileName"),
      MAP_FILE_NAME((short)2, "mapFileName"),
      REDUCE_FILE_NAME((short)3, "reduceFileName"),
      WORKERS_LIST((short)4, "workersList");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATA_FILE_NAME
            return DATA_FILE_NAME;
          case 2: // MAP_FILE_NAME
            return MAP_FILE_NAME;
          case 3: // REDUCE_FILE_NAME
            return REDUCE_FILE_NAME;
          case 4: // WORKERS_LIST
            return WORKERS_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATA_FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("dataFileName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MAP_FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("mapFileName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REDUCE_FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("reduceFileName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.WORKERS_LIST, new org.apache.thrift.meta_data.FieldMetaData("workersList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ClientListeningInfo.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AssignWork_args.class, metaDataMap);
    }

    public AssignWork_args() {
    }

    public AssignWork_args(
      String dataFileName,
      String mapFileName,
      String reduceFileName,
      java.util.List<ClientListeningInfo> workersList)
    {
      this();
      this.dataFileName = dataFileName;
      this.mapFileName = mapFileName;
      this.reduceFileName = reduceFileName;
      this.workersList = workersList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AssignWork_args(AssignWork_args other) {
      if (other.isSetDataFileName()) {
        this.dataFileName = other.dataFileName;
      }
      if (other.isSetMapFileName()) {
        this.mapFileName = other.mapFileName;
      }
      if (other.isSetReduceFileName()) {
        this.reduceFileName = other.reduceFileName;
      }
      if (other.isSetWorkersList()) {
        java.util.List<ClientListeningInfo> __this__workersList = new java.util.ArrayList<ClientListeningInfo>(other.workersList.size());
        for (ClientListeningInfo other_element : other.workersList) {
          __this__workersList.add(new ClientListeningInfo(other_element));
        }
        this.workersList = __this__workersList;
      }
    }

    public AssignWork_args deepCopy() {
      return new AssignWork_args(this);
    }

    @Override
    public void clear() {
      this.dataFileName = null;
      this.mapFileName = null;
      this.reduceFileName = null;
      this.workersList = null;
    }

    public String getDataFileName() {
      return this.dataFileName;
    }

    public AssignWork_args setDataFileName(String dataFileName) {
      this.dataFileName = dataFileName;
      return this;
    }

    public void unsetDataFileName() {
      this.dataFileName = null;
    }

    /** Returns true if field dataFileName is set (has been assigned a value) and false otherwise */
    public boolean isSetDataFileName() {
      return this.dataFileName != null;
    }

    public void setDataFileNameIsSet(boolean value) {
      if (!value) {
        this.dataFileName = null;
      }
    }

    public String getMapFileName() {
      return this.mapFileName;
    }

    public AssignWork_args setMapFileName(String mapFileName) {
      this.mapFileName = mapFileName;
      return this;
    }

    public void unsetMapFileName() {
      this.mapFileName = null;
    }

    /** Returns true if field mapFileName is set (has been assigned a value) and false otherwise */
    public boolean isSetMapFileName() {
      return this.mapFileName != null;
    }

    public void setMapFileNameIsSet(boolean value) {
      if (!value) {
        this.mapFileName = null;
      }
    }

    public String getReduceFileName() {
      return this.reduceFileName;
    }

    public AssignWork_args setReduceFileName(String reduceFileName) {
      this.reduceFileName = reduceFileName;
      return this;
    }

    public void unsetReduceFileName() {
      this.reduceFileName = null;
    }

    /** Returns true if field reduceFileName is set (has been assigned a value) and false otherwise */
    public boolean isSetReduceFileName() {
      return this.reduceFileName != null;
    }

    public void setReduceFileNameIsSet(boolean value) {
      if (!value) {
        this.reduceFileName = null;
      }
    }

    public int getWorkersListSize() {
      return (this.workersList == null) ? 0 : this.workersList.size();
    }

    public java.util.Iterator<ClientListeningInfo> getWorkersListIterator() {
      return (this.workersList == null) ? null : this.workersList.iterator();
    }

    public void addToWorkersList(ClientListeningInfo elem) {
      if (this.workersList == null) {
        this.workersList = new java.util.ArrayList<ClientListeningInfo>();
      }
      this.workersList.add(elem);
    }

    public java.util.List<ClientListeningInfo> getWorkersList() {
      return this.workersList;
    }

    public AssignWork_args setWorkersList(java.util.List<ClientListeningInfo> workersList) {
      this.workersList = workersList;
      return this;
    }

    public void unsetWorkersList() {
      this.workersList = null;
    }

    /** Returns true if field workersList is set (has been assigned a value) and false otherwise */
    public boolean isSetWorkersList() {
      return this.workersList != null;
    }

    public void setWorkersListIsSet(boolean value) {
      if (!value) {
        this.workersList = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATA_FILE_NAME:
        if (value == null) {
          unsetDataFileName();
        } else {
          setDataFileName((String)value);
        }
        break;

      case MAP_FILE_NAME:
        if (value == null) {
          unsetMapFileName();
        } else {
          setMapFileName((String)value);
        }
        break;

      case REDUCE_FILE_NAME:
        if (value == null) {
          unsetReduceFileName();
        } else {
          setReduceFileName((String)value);
        }
        break;

      case WORKERS_LIST:
        if (value == null) {
          unsetWorkersList();
        } else {
          setWorkersList((java.util.List<ClientListeningInfo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATA_FILE_NAME:
        return getDataFileName();

      case MAP_FILE_NAME:
        return getMapFileName();

      case REDUCE_FILE_NAME:
        return getReduceFileName();

      case WORKERS_LIST:
        return getWorkersList();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATA_FILE_NAME:
        return isSetDataFileName();
      case MAP_FILE_NAME:
        return isSetMapFileName();
      case REDUCE_FILE_NAME:
        return isSetReduceFileName();
      case WORKERS_LIST:
        return isSetWorkersList();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AssignWork_args)
        return this.equals((AssignWork_args)that);
      return false;
    }

    public boolean equals(AssignWork_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_dataFileName = true && this.isSetDataFileName();
      boolean that_present_dataFileName = true && that.isSetDataFileName();
      if (this_present_dataFileName || that_present_dataFileName) {
        if (!(this_present_dataFileName && that_present_dataFileName))
          return false;
        if (!this.dataFileName.equals(that.dataFileName))
          return false;
      }

      boolean this_present_mapFileName = true && this.isSetMapFileName();
      boolean that_present_mapFileName = true && that.isSetMapFileName();
      if (this_present_mapFileName || that_present_mapFileName) {
        if (!(this_present_mapFileName && that_present_mapFileName))
          return false;
        if (!this.mapFileName.equals(that.mapFileName))
          return false;
      }

      boolean this_present_reduceFileName = true && this.isSetReduceFileName();
      boolean that_present_reduceFileName = true && that.isSetReduceFileName();
      if (this_present_reduceFileName || that_present_reduceFileName) {
        if (!(this_present_reduceFileName && that_present_reduceFileName))
          return false;
        if (!this.reduceFileName.equals(that.reduceFileName))
          return false;
      }

      boolean this_present_workersList = true && this.isSetWorkersList();
      boolean that_present_workersList = true && that.isSetWorkersList();
      if (this_present_workersList || that_present_workersList) {
        if (!(this_present_workersList && that_present_workersList))
          return false;
        if (!this.workersList.equals(that.workersList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetDataFileName()) ? 131071 : 524287);
      if (isSetDataFileName())
        hashCode = hashCode * 8191 + dataFileName.hashCode();

      hashCode = hashCode * 8191 + ((isSetMapFileName()) ? 131071 : 524287);
      if (isSetMapFileName())
        hashCode = hashCode * 8191 + mapFileName.hashCode();

      hashCode = hashCode * 8191 + ((isSetReduceFileName()) ? 131071 : 524287);
      if (isSetReduceFileName())
        hashCode = hashCode * 8191 + reduceFileName.hashCode();

      hashCode = hashCode * 8191 + ((isSetWorkersList()) ? 131071 : 524287);
      if (isSetWorkersList())
        hashCode = hashCode * 8191 + workersList.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(AssignWork_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDataFileName()).compareTo(other.isSetDataFileName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataFileName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataFileName, other.dataFileName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMapFileName()).compareTo(other.isSetMapFileName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMapFileName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mapFileName, other.mapFileName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReduceFileName()).compareTo(other.isSetReduceFileName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReduceFileName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reduceFileName, other.reduceFileName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWorkersList()).compareTo(other.isSetWorkersList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWorkersList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workersList, other.workersList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AssignWork_args(");
      boolean first = true;

      sb.append("dataFileName:");
      if (this.dataFileName == null) {
        sb.append("null");
      } else {
        sb.append(this.dataFileName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mapFileName:");
      if (this.mapFileName == null) {
        sb.append("null");
      } else {
        sb.append(this.mapFileName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reduceFileName:");
      if (this.reduceFileName == null) {
        sb.append("null");
      } else {
        sb.append(this.reduceFileName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("workersList:");
      if (this.workersList == null) {
        sb.append("null");
      } else {
        sb.append(this.workersList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AssignWork_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public AssignWork_argsStandardScheme getScheme() {
        return new AssignWork_argsStandardScheme();
      }
    }

    private static class AssignWork_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<AssignWork_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AssignWork_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATA_FILE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dataFileName = iprot.readString();
                struct.setDataFileNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MAP_FILE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mapFileName = iprot.readString();
                struct.setMapFileNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // REDUCE_FILE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.reduceFileName = iprot.readString();
                struct.setReduceFileNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // WORKERS_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.workersList = new java.util.ArrayList<ClientListeningInfo>(_list0.size);
                  ClientListeningInfo _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new ClientListeningInfo();
                    _elem1.read(iprot);
                    struct.workersList.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setWorkersListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AssignWork_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dataFileName != null) {
          oprot.writeFieldBegin(DATA_FILE_NAME_FIELD_DESC);
          oprot.writeString(struct.dataFileName);
          oprot.writeFieldEnd();
        }
        if (struct.mapFileName != null) {
          oprot.writeFieldBegin(MAP_FILE_NAME_FIELD_DESC);
          oprot.writeString(struct.mapFileName);
          oprot.writeFieldEnd();
        }
        if (struct.reduceFileName != null) {
          oprot.writeFieldBegin(REDUCE_FILE_NAME_FIELD_DESC);
          oprot.writeString(struct.reduceFileName);
          oprot.writeFieldEnd();
        }
        if (struct.workersList != null) {
          oprot.writeFieldBegin(WORKERS_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.workersList.size()));
            for (ClientListeningInfo _iter3 : struct.workersList)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AssignWork_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public AssignWork_argsTupleScheme getScheme() {
        return new AssignWork_argsTupleScheme();
      }
    }

    private static class AssignWork_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<AssignWork_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AssignWork_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetDataFileName()) {
          optionals.set(0);
        }
        if (struct.isSetMapFileName()) {
          optionals.set(1);
        }
        if (struct.isSetReduceFileName()) {
          optionals.set(2);
        }
        if (struct.isSetWorkersList()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetDataFileName()) {
          oprot.writeString(struct.dataFileName);
        }
        if (struct.isSetMapFileName()) {
          oprot.writeString(struct.mapFileName);
        }
        if (struct.isSetReduceFileName()) {
          oprot.writeString(struct.reduceFileName);
        }
        if (struct.isSetWorkersList()) {
          {
            oprot.writeI32(struct.workersList.size());
            for (ClientListeningInfo _iter4 : struct.workersList)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AssignWork_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.dataFileName = iprot.readString();
          struct.setDataFileNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.mapFileName = iprot.readString();
          struct.setMapFileNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.reduceFileName = iprot.readString();
          struct.setReduceFileNameIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.workersList = new java.util.ArrayList<ClientListeningInfo>(_list5.size);
            ClientListeningInfo _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new ClientListeningInfo();
              _elem6.read(iprot);
              struct.workersList.add(_elem6);
            }
          }
          struct.setWorkersListIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class AssignWork_result implements org.apache.thrift.TBase<AssignWork_result, AssignWork_result._Fields>, java.io.Serializable, Cloneable, Comparable<AssignWork_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AssignWork_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new AssignWork_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new AssignWork_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AssignWork_result.class, metaDataMap);
    }

    public AssignWork_result() {
    }

    public AssignWork_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AssignWork_result(AssignWork_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public AssignWork_result deepCopy() {
      return new AssignWork_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public AssignWork_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AssignWork_result)
        return this.equals((AssignWork_result)that);
      return false;
    }

    public boolean equals(AssignWork_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(AssignWork_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AssignWork_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AssignWork_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public AssignWork_resultStandardScheme getScheme() {
        return new AssignWork_resultStandardScheme();
      }
    }

    private static class AssignWork_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<AssignWork_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AssignWork_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AssignWork_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AssignWork_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public AssignWork_resultTupleScheme getScheme() {
        return new AssignWork_resultTupleScheme();
      }
    }

    private static class AssignWork_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<AssignWork_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AssignWork_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AssignWork_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class StartMap_args implements org.apache.thrift.TBase<StartMap_args, StartMap_args._Fields>, java.io.Serializable, Cloneable, Comparable<StartMap_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StartMap_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new StartMap_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new StartMap_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StartMap_args.class, metaDataMap);
    }

    public StartMap_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public StartMap_args(StartMap_args other) {
    }

    public StartMap_args deepCopy() {
      return new StartMap_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof StartMap_args)
        return this.equals((StartMap_args)that);
      return false;
    }

    public boolean equals(StartMap_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(StartMap_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("StartMap_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class StartMap_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public StartMap_argsStandardScheme getScheme() {
        return new StartMap_argsStandardScheme();
      }
    }

    private static class StartMap_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<StartMap_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, StartMap_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, StartMap_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class StartMap_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public StartMap_argsTupleScheme getScheme() {
        return new StartMap_argsTupleScheme();
      }
    }

    private static class StartMap_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<StartMap_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, StartMap_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, StartMap_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class StartMap_result implements org.apache.thrift.TBase<StartMap_result, StartMap_result._Fields>, java.io.Serializable, Cloneable, Comparable<StartMap_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StartMap_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField INVALID_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("invalidState", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new StartMap_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new StartMap_resultTupleSchemeFactory();

    public boolean success; // required
    public InvalidState invalidState; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      INVALID_STATE((short)1, "invalidState");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // INVALID_STATE
            return INVALID_STATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.INVALID_STATE, new org.apache.thrift.meta_data.FieldMetaData("invalidState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InvalidState.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StartMap_result.class, metaDataMap);
    }

    public StartMap_result() {
    }

    public StartMap_result(
      boolean success,
      InvalidState invalidState)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.invalidState = invalidState;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public StartMap_result(StartMap_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetInvalidState()) {
        this.invalidState = new InvalidState(other.invalidState);
      }
    }

    public StartMap_result deepCopy() {
      return new StartMap_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.invalidState = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public StartMap_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public InvalidState getInvalidState() {
      return this.invalidState;
    }

    public StartMap_result setInvalidState(InvalidState invalidState) {
      this.invalidState = invalidState;
      return this;
    }

    public void unsetInvalidState() {
      this.invalidState = null;
    }

    /** Returns true if field invalidState is set (has been assigned a value) and false otherwise */
    public boolean isSetInvalidState() {
      return this.invalidState != null;
    }

    public void setInvalidStateIsSet(boolean value) {
      if (!value) {
        this.invalidState = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case INVALID_STATE:
        if (value == null) {
          unsetInvalidState();
        } else {
          setInvalidState((InvalidState)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case INVALID_STATE:
        return getInvalidState();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case INVALID_STATE:
        return isSetInvalidState();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof StartMap_result)
        return this.equals((StartMap_result)that);
      return false;
    }

    public boolean equals(StartMap_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_invalidState = true && this.isSetInvalidState();
      boolean that_present_invalidState = true && that.isSetInvalidState();
      if (this_present_invalidState || that_present_invalidState) {
        if (!(this_present_invalidState && that_present_invalidState))
          return false;
        if (!this.invalidState.equals(that.invalidState))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetInvalidState()) ? 131071 : 524287);
      if (isSetInvalidState())
        hashCode = hashCode * 8191 + invalidState.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(StartMap_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInvalidState()).compareTo(other.isSetInvalidState());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInvalidState()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invalidState, other.invalidState);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("StartMap_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("invalidState:");
      if (this.invalidState == null) {
        sb.append("null");
      } else {
        sb.append(this.invalidState);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class StartMap_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public StartMap_resultStandardScheme getScheme() {
        return new StartMap_resultStandardScheme();
      }
    }

    private static class StartMap_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<StartMap_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, StartMap_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // INVALID_STATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.invalidState = new InvalidState();
                struct.invalidState.read(iprot);
                struct.setInvalidStateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, StartMap_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.invalidState != null) {
          oprot.writeFieldBegin(INVALID_STATE_FIELD_DESC);
          struct.invalidState.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class StartMap_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public StartMap_resultTupleScheme getScheme() {
        return new StartMap_resultTupleScheme();
      }
    }

    private static class StartMap_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<StartMap_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, StartMap_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetInvalidState()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetInvalidState()) {
          struct.invalidState.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, StartMap_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.invalidState = new InvalidState();
          struct.invalidState.read(iprot);
          struct.setInvalidStateIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class StartReduce_args implements org.apache.thrift.TBase<StartReduce_args, StartReduce_args._Fields>, java.io.Serializable, Cloneable, Comparable<StartReduce_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StartReduce_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new StartReduce_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new StartReduce_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StartReduce_args.class, metaDataMap);
    }

    public StartReduce_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public StartReduce_args(StartReduce_args other) {
    }

    public StartReduce_args deepCopy() {
      return new StartReduce_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof StartReduce_args)
        return this.equals((StartReduce_args)that);
      return false;
    }

    public boolean equals(StartReduce_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(StartReduce_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("StartReduce_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class StartReduce_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public StartReduce_argsStandardScheme getScheme() {
        return new StartReduce_argsStandardScheme();
      }
    }

    private static class StartReduce_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<StartReduce_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, StartReduce_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, StartReduce_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class StartReduce_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public StartReduce_argsTupleScheme getScheme() {
        return new StartReduce_argsTupleScheme();
      }
    }

    private static class StartReduce_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<StartReduce_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, StartReduce_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, StartReduce_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class StartReduce_result implements org.apache.thrift.TBase<StartReduce_result, StartReduce_result._Fields>, java.io.Serializable, Cloneable, Comparable<StartReduce_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StartReduce_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField INVALID_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("invalidState", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new StartReduce_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new StartReduce_resultTupleSchemeFactory();

    public boolean success; // required
    public InvalidState invalidState; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      INVALID_STATE((short)1, "invalidState");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // INVALID_STATE
            return INVALID_STATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.INVALID_STATE, new org.apache.thrift.meta_data.FieldMetaData("invalidState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InvalidState.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StartReduce_result.class, metaDataMap);
    }

    public StartReduce_result() {
    }

    public StartReduce_result(
      boolean success,
      InvalidState invalidState)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.invalidState = invalidState;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public StartReduce_result(StartReduce_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetInvalidState()) {
        this.invalidState = new InvalidState(other.invalidState);
      }
    }

    public StartReduce_result deepCopy() {
      return new StartReduce_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.invalidState = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public StartReduce_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public InvalidState getInvalidState() {
      return this.invalidState;
    }

    public StartReduce_result setInvalidState(InvalidState invalidState) {
      this.invalidState = invalidState;
      return this;
    }

    public void unsetInvalidState() {
      this.invalidState = null;
    }

    /** Returns true if field invalidState is set (has been assigned a value) and false otherwise */
    public boolean isSetInvalidState() {
      return this.invalidState != null;
    }

    public void setInvalidStateIsSet(boolean value) {
      if (!value) {
        this.invalidState = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case INVALID_STATE:
        if (value == null) {
          unsetInvalidState();
        } else {
          setInvalidState((InvalidState)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case INVALID_STATE:
        return getInvalidState();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case INVALID_STATE:
        return isSetInvalidState();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof StartReduce_result)
        return this.equals((StartReduce_result)that);
      return false;
    }

    public boolean equals(StartReduce_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_invalidState = true && this.isSetInvalidState();
      boolean that_present_invalidState = true && that.isSetInvalidState();
      if (this_present_invalidState || that_present_invalidState) {
        if (!(this_present_invalidState && that_present_invalidState))
          return false;
        if (!this.invalidState.equals(that.invalidState))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetInvalidState()) ? 131071 : 524287);
      if (isSetInvalidState())
        hashCode = hashCode * 8191 + invalidState.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(StartReduce_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInvalidState()).compareTo(other.isSetInvalidState());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInvalidState()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invalidState, other.invalidState);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("StartReduce_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("invalidState:");
      if (this.invalidState == null) {
        sb.append("null");
      } else {
        sb.append(this.invalidState);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class StartReduce_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public StartReduce_resultStandardScheme getScheme() {
        return new StartReduce_resultStandardScheme();
      }
    }

    private static class StartReduce_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<StartReduce_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, StartReduce_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // INVALID_STATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.invalidState = new InvalidState();
                struct.invalidState.read(iprot);
                struct.setInvalidStateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, StartReduce_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.invalidState != null) {
          oprot.writeFieldBegin(INVALID_STATE_FIELD_DESC);
          struct.invalidState.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class StartReduce_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public StartReduce_resultTupleScheme getScheme() {
        return new StartReduce_resultTupleScheme();
      }
    }

    private static class StartReduce_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<StartReduce_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, StartReduce_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetInvalidState()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetInvalidState()) {
          struct.invalidState.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, StartReduce_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.invalidState = new InvalidState();
          struct.invalidState.read(iprot);
          struct.setInvalidStateIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class Ping_args implements org.apache.thrift.TBase<Ping_args, Ping_args._Fields>, java.io.Serializable, Cloneable, Comparable<Ping_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Ping_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Ping_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Ping_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Ping_args.class, metaDataMap);
    }

    public Ping_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Ping_args(Ping_args other) {
    }

    public Ping_args deepCopy() {
      return new Ping_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Ping_args)
        return this.equals((Ping_args)that);
      return false;
    }

    public boolean equals(Ping_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(Ping_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Ping_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Ping_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Ping_argsStandardScheme getScheme() {
        return new Ping_argsStandardScheme();
      }
    }

    private static class Ping_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Ping_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Ping_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Ping_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Ping_argsTupleScheme getScheme() {
        return new Ping_argsTupleScheme();
      }
    }

    private static class Ping_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Ping_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class Ping_result implements org.apache.thrift.TBase<Ping_result, Ping_result._Fields>, java.io.Serializable, Cloneable, Comparable<Ping_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Ping_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Ping_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Ping_resultTupleSchemeFactory();

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Ping_result.class, metaDataMap);
    }

    public Ping_result() {
    }

    public Ping_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Ping_result(Ping_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public Ping_result deepCopy() {
      return new Ping_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public Ping_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Ping_result)
        return this.equals((Ping_result)that);
      return false;
    }

    public boolean equals(Ping_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      return hashCode;
    }

    @Override
    public int compareTo(Ping_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Ping_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Ping_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Ping_resultStandardScheme getScheme() {
        return new Ping_resultStandardScheme();
      }
    }

    private static class Ping_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<Ping_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Ping_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Ping_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Ping_resultTupleScheme getScheme() {
        return new Ping_resultTupleScheme();
      }
    }

    private static class Ping_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<Ping_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class RegisterMapPair_args implements org.apache.thrift.TBase<RegisterMapPair_args, RegisterMapPair_args._Fields>, java.io.Serializable, Cloneable, Comparable<RegisterMapPair_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RegisterMapPair_args");

    private static final org.apache.thrift.protocol.TField PAIRS_FIELD_DESC = new org.apache.thrift.protocol.TField("pairs", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RegisterMapPair_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RegisterMapPair_argsTupleSchemeFactory();

    public java.util.List<KeyValueEntity> pairs; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAIRS((short)1, "pairs");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAIRS
            return PAIRS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAIRS, new org.apache.thrift.meta_data.FieldMetaData("pairs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, KeyValueEntity.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RegisterMapPair_args.class, metaDataMap);
    }

    public RegisterMapPair_args() {
    }

    public RegisterMapPair_args(
      java.util.List<KeyValueEntity> pairs)
    {
      this();
      this.pairs = pairs;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RegisterMapPair_args(RegisterMapPair_args other) {
      if (other.isSetPairs()) {
        java.util.List<KeyValueEntity> __this__pairs = new java.util.ArrayList<KeyValueEntity>(other.pairs.size());
        for (KeyValueEntity other_element : other.pairs) {
          __this__pairs.add(new KeyValueEntity(other_element));
        }
        this.pairs = __this__pairs;
      }
    }

    public RegisterMapPair_args deepCopy() {
      return new RegisterMapPair_args(this);
    }

    @Override
    public void clear() {
      this.pairs = null;
    }

    public int getPairsSize() {
      return (this.pairs == null) ? 0 : this.pairs.size();
    }

    public java.util.Iterator<KeyValueEntity> getPairsIterator() {
      return (this.pairs == null) ? null : this.pairs.iterator();
    }

    public void addToPairs(KeyValueEntity elem) {
      if (this.pairs == null) {
        this.pairs = new java.util.ArrayList<KeyValueEntity>();
      }
      this.pairs.add(elem);
    }

    public java.util.List<KeyValueEntity> getPairs() {
      return this.pairs;
    }

    public RegisterMapPair_args setPairs(java.util.List<KeyValueEntity> pairs) {
      this.pairs = pairs;
      return this;
    }

    public void unsetPairs() {
      this.pairs = null;
    }

    /** Returns true if field pairs is set (has been assigned a value) and false otherwise */
    public boolean isSetPairs() {
      return this.pairs != null;
    }

    public void setPairsIsSet(boolean value) {
      if (!value) {
        this.pairs = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAIRS:
        if (value == null) {
          unsetPairs();
        } else {
          setPairs((java.util.List<KeyValueEntity>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAIRS:
        return getPairs();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAIRS:
        return isSetPairs();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof RegisterMapPair_args)
        return this.equals((RegisterMapPair_args)that);
      return false;
    }

    public boolean equals(RegisterMapPair_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_pairs = true && this.isSetPairs();
      boolean that_present_pairs = true && that.isSetPairs();
      if (this_present_pairs || that_present_pairs) {
        if (!(this_present_pairs && that_present_pairs))
          return false;
        if (!this.pairs.equals(that.pairs))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPairs()) ? 131071 : 524287);
      if (isSetPairs())
        hashCode = hashCode * 8191 + pairs.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(RegisterMapPair_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPairs()).compareTo(other.isSetPairs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPairs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pairs, other.pairs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("RegisterMapPair_args(");
      boolean first = true;

      sb.append("pairs:");
      if (this.pairs == null) {
        sb.append("null");
      } else {
        sb.append(this.pairs);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RegisterMapPair_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public RegisterMapPair_argsStandardScheme getScheme() {
        return new RegisterMapPair_argsStandardScheme();
      }
    }

    private static class RegisterMapPair_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<RegisterMapPair_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RegisterMapPair_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAIRS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.pairs = new java.util.ArrayList<KeyValueEntity>(_list8.size);
                  KeyValueEntity _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = new KeyValueEntity();
                    _elem9.read(iprot);
                    struct.pairs.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setPairsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RegisterMapPair_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pairs != null) {
          oprot.writeFieldBegin(PAIRS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.pairs.size()));
            for (KeyValueEntity _iter11 : struct.pairs)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RegisterMapPair_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public RegisterMapPair_argsTupleScheme getScheme() {
        return new RegisterMapPair_argsTupleScheme();
      }
    }

    private static class RegisterMapPair_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<RegisterMapPair_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RegisterMapPair_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPairs()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPairs()) {
          {
            oprot.writeI32(struct.pairs.size());
            for (KeyValueEntity _iter12 : struct.pairs)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RegisterMapPair_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.pairs = new java.util.ArrayList<KeyValueEntity>(_list13.size);
            KeyValueEntity _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = new KeyValueEntity();
              _elem14.read(iprot);
              struct.pairs.add(_elem14);
            }
          }
          struct.setPairsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class RegisterMapPair_result implements org.apache.thrift.TBase<RegisterMapPair_result, RegisterMapPair_result._Fields>, java.io.Serializable, Cloneable, Comparable<RegisterMapPair_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RegisterMapPair_result");

    private static final org.apache.thrift.protocol.TField INVALID_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("invalidState", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RegisterMapPair_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RegisterMapPair_resultTupleSchemeFactory();

    public InvalidState invalidState; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INVALID_STATE((short)1, "invalidState");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INVALID_STATE
            return INVALID_STATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INVALID_STATE, new org.apache.thrift.meta_data.FieldMetaData("invalidState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InvalidState.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RegisterMapPair_result.class, metaDataMap);
    }

    public RegisterMapPair_result() {
    }

    public RegisterMapPair_result(
      InvalidState invalidState)
    {
      this();
      this.invalidState = invalidState;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RegisterMapPair_result(RegisterMapPair_result other) {
      if (other.isSetInvalidState()) {
        this.invalidState = new InvalidState(other.invalidState);
      }
    }

    public RegisterMapPair_result deepCopy() {
      return new RegisterMapPair_result(this);
    }

    @Override
    public void clear() {
      this.invalidState = null;
    }

    public InvalidState getInvalidState() {
      return this.invalidState;
    }

    public RegisterMapPair_result setInvalidState(InvalidState invalidState) {
      this.invalidState = invalidState;
      return this;
    }

    public void unsetInvalidState() {
      this.invalidState = null;
    }

    /** Returns true if field invalidState is set (has been assigned a value) and false otherwise */
    public boolean isSetInvalidState() {
      return this.invalidState != null;
    }

    public void setInvalidStateIsSet(boolean value) {
      if (!value) {
        this.invalidState = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INVALID_STATE:
        if (value == null) {
          unsetInvalidState();
        } else {
          setInvalidState((InvalidState)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INVALID_STATE:
        return getInvalidState();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INVALID_STATE:
        return isSetInvalidState();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof RegisterMapPair_result)
        return this.equals((RegisterMapPair_result)that);
      return false;
    }

    public boolean equals(RegisterMapPair_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_invalidState = true && this.isSetInvalidState();
      boolean that_present_invalidState = true && that.isSetInvalidState();
      if (this_present_invalidState || that_present_invalidState) {
        if (!(this_present_invalidState && that_present_invalidState))
          return false;
        if (!this.invalidState.equals(that.invalidState))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetInvalidState()) ? 131071 : 524287);
      if (isSetInvalidState())
        hashCode = hashCode * 8191 + invalidState.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(RegisterMapPair_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetInvalidState()).compareTo(other.isSetInvalidState());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInvalidState()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invalidState, other.invalidState);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("RegisterMapPair_result(");
      boolean first = true;

      sb.append("invalidState:");
      if (this.invalidState == null) {
        sb.append("null");
      } else {
        sb.append(this.invalidState);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RegisterMapPair_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public RegisterMapPair_resultStandardScheme getScheme() {
        return new RegisterMapPair_resultStandardScheme();
      }
    }

    private static class RegisterMapPair_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<RegisterMapPair_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RegisterMapPair_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INVALID_STATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.invalidState = new InvalidState();
                struct.invalidState.read(iprot);
                struct.setInvalidStateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RegisterMapPair_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.invalidState != null) {
          oprot.writeFieldBegin(INVALID_STATE_FIELD_DESC);
          struct.invalidState.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RegisterMapPair_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public RegisterMapPair_resultTupleScheme getScheme() {
        return new RegisterMapPair_resultTupleScheme();
      }
    }

    private static class RegisterMapPair_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<RegisterMapPair_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RegisterMapPair_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetInvalidState()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetInvalidState()) {
          struct.invalidState.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RegisterMapPair_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.invalidState = new InvalidState();
          struct.invalidState.read(iprot);
          struct.setInvalidStateIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
