package MapReduce.Thrift;
import Configuration.WorkerConfiguration;
import JavaWorker.DataSyncWrapper;
import MapReduce.Thrift.AutoGenerated.ClientListeningInfo;
import MapReduce.Thrift.AutoGenerated.KeyValueEntity;
import MapReduce.Thrift.AutoGenerated.MapReduceWorker;
import PythonPoCClient.PythonRunner;
import org.apache.commons.lang3.Pair;

import java.util.List;
import java.util.Random;
import org.slf4j.*;


/**
 * Created by msuchock on 27.05.2018.
 */

public class MapReduceWorkerHandler implements MapReduceWorker.Iface {
    private String dataFileName;
    private String mapFileName;
    private String reduceFileName;
    private PythonRunner pyRunner;
    private DataSyncWrapper dataSyncWrapper;
    WorkerConfiguration workerConfiguration;

    public MapReduceWorkerHandler(DataSyncWrapper dataSyncWrapper, WorkerConfiguration workerConfiguration){
        this.dataSyncWrapper = dataSyncWrapper;
        this.workerConfiguration = workerConfiguration;
    }

    public boolean AssignWork(String dataFileName, String mapFileName, String reduceFileName, List<ClientListeningInfo> workersList) {
        this.dataFileName = dataFileName;
        this.mapFileName = mapFileName;
        this.reduceFileName = reduceFileName;
        dataSyncWrapper.setWorkersConfigurationListList(workersList);
        pyRunner = new PythonRunner(dataFileName, mapFileName, reduceFileName, workerConfiguration.getDataStoragePath(), workerConfiguration.getPythonPath());

        System.out.println("Get data: " + this.dataFileName + " map: " + this.mapFileName + " reduce: " + this.reduceFileName);
        System.out.println("Workers:");
        workersList.forEach(x -> System.out.println(x.toString()));
        try{
            dataSyncWrapper.endOfAction(true);
        } catch(InterruptedException e){
            System.out.println("InterruptedException occurred while syncing action between server and client");
            e.printStackTrace();
            return false;
        }
        return true;
    }

    public boolean StartMap() {
        System.out.println("Map begins");
        pyRunner.map(dataSyncWrapper);
        try {
            System.in.read();
        } catch (Exception e){
            System.out.println("Exception occurred while reading key");
            return false;
        }
        return true;
    }

    public boolean StartReduce() {
        System.out.println("Reduce begins");
        pyRunner.reduce(dataSyncWrapper);
        synchronized (dataSyncWrapper){
            dataSyncWrapper.reduceFinished();
        }
        return true;
    }

    public int Ping()
    {
        return new Random().nextInt();
    }

    public void RegisterMapPair(List<KeyValueEntity> pairs) {
        System.out.println("I got pairs:");
        pairs.forEach(x -> {
            System.out.println(String.valueOf(x.getKey()) + " -> " + String.valueOf(x.getValue()) + " with quantity: " + String.valueOf(x.getQuantity()));
            for(int i=0; i<x.getQuantity(); i++){
                //adding as many pairs as quantity in pair
                dataSyncWrapper.addToMyKeyValuesMap(new Pair<>(x.getKey(),Integer.valueOf(x.getValue())));
            }
        });
    }

}



